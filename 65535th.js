// Generated by CoffeeScript 1.9.2

/*
\++================================|                    _=_
 \_________________________________/               ___/==+++==\___
               """\__      \"""       |======================================/
                     \__    \_          / ..  . _/--===+_____+===--""
                        \__   \       _/.  .. _/         `+'
                           \__ \   __/_______/
                          ___-\_\-'---==+____|
                    __--+" .    . .        "==_
                    /  |. .  ..     -------- | \
                    "==+_    .   .  -------- | /
                         ""\___  . ..     __=="
                               """"--=--""
 */

(function() {
  var ArticleView, ArticlesView, Controller, HeaderView, NotFoundView, Post, Posts, Repositories, RepositoriesView, Repository, RepositoryView, app, controller,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Post = (function(superClass) {
    extend(Post, superClass);

    function Post() {
      return Post.__super__.constructor.apply(this, arguments);
    }

    Post.prototype.defaults = {
      title: '',
      contents: '',
      date: '',
      basename: '',
      iso8601Date: ''
    };

    Post.prototype.url = function() {
      return "release/articles/" + (this.get('basename')) + ".html";
    };

    Post.prototype.loadPost = function() {
      var p;
      this.set('date', new Date(this.get('iso8601Date')), {
        silent: true
      });
      p = $.get(this.url());
      return p.done((function(_this) {
        return function(html) {
          return _this.set('contents', html);
        };
      })(this));
    };

    return Post;

  })(Backbone.Model);

  Posts = (function(superClass) {
    extend(Posts, superClass);

    function Posts() {
      return Posts.__super__.constructor.apply(this, arguments);
    }

    Posts.prototype.model = Post;

    Posts.prototype.comparator = function(model1, model2) {
      var m1, m2;
      m1 = model1.get('date');
      m2 = model2.get('date');
      if (m1 === m2) {
        return 0;
      } else if (m1 < m2) {
        return 1;
      } else {
        return -1;
      }
    };

    return Posts;

  })(Backbone.Collection);

  ArticleView = (function(superClass) {
    extend(ArticleView, superClass);

    function ArticleView() {
      return ArticleView.__super__.constructor.apply(this, arguments);
    }

    ArticleView.prototype.tagName = 'article';

    ArticleView.prototype.className = 'small';

    ArticleView.prototype.template = _.template('<div class="article-title"><a href="#post"><%=title%></a></div><div class="article-content"><%=contents%></div>');

    ArticleView.prototype.triggers = {
      'click .article-title > a': 'show:single'
    };

    ArticleView.prototype.onRender = function() {
      return this.$('pre code').each(function(i, b) {
        return typeof hljs !== "undefined" && hljs !== null ? typeof hljs.highlightBlock === "function" ? hljs.highlightBlock(b) : void 0 : void 0;
      });
    };

    return ArticleView;

  })(Marionette.ItemView);

  ArticlesView = (function(superClass) {
    extend(ArticlesView, superClass);

    function ArticlesView() {
      return ArticlesView.__super__.constructor.apply(this, arguments);
    }

    ArticlesView.prototype.tagName = 'section';

    ArticlesView.prototype.className = 'small';

    ArticlesView.prototype.childView = ArticleView;

    return ArticlesView;

  })(Marionette.CollectionView);

  NotFoundView = (function(superClass) {
    extend(NotFoundView, superClass);

    function NotFoundView() {
      return NotFoundView.__super__.constructor.apply(this, arguments);
    }

    NotFoundView.prototype.template = _.template('<div class="nf-title">Not found</div><div class="nf-text">The requested page could not be found</div><img src="arrow.png" id="home-arrow" />');

    NotFoundView.prototype.tagName = 'section';

    NotFoundView.prototype.className = 'nf small';

    return NotFoundView;

  })(Marionette.ItemView);

  Repository = (function(superClass) {
    extend(Repository, superClass);

    function Repository() {
      return Repository.__super__.constructor.apply(this, arguments);
    }

    Repository.prototype.defaults = {
      id: '',
      updated_at: '',
      name: '',
      description: '',
      html_url: '',
      fork: true
    };

    return Repository;

  })(Backbone.Model);

  Repositories = (function(superClass) {
    extend(Repositories, superClass);

    function Repositories() {
      return Repositories.__super__.constructor.apply(this, arguments);
    }

    Repositories.prototype.model = Repository;

    Repositories.prototype.url = 'https://api.github.com/users/dak0rn/repos';

    Repositories.prototype.comparator = function(a, b) {
      var k, l;
      k = a.get('updated_at');
      l = b.get('updated_at');
      if (k === l) {
        return 0;
      } else if (k < l) {
        return 1;
      } else {
        return -1;
      }
    };

    return Repositories;

  })(Backbone.Collection);

  RepositoryView = (function(superClass) {
    extend(RepositoryView, superClass);

    function RepositoryView() {
      return RepositoryView.__super__.constructor.apply(this, arguments);
    }

    RepositoryView.prototype.className = 'pr-row';

    RepositoryView.prototype.template = _.template('<div class="pr-title"><a href="<%=html_url%>"><%=name%></a></div><div class="pr-text"><%=description%></div>');

    return RepositoryView;

  })(Marionette.ItemView);

  RepositoriesView = (function(superClass) {
    extend(RepositoriesView, superClass);

    function RepositoriesView() {
      return RepositoriesView.__super__.constructor.apply(this, arguments);
    }

    RepositoriesView.prototype.childView = RepositoryView;

    RepositoriesView.prototype.template = _.template('<div class="pr-large-title"><h1>Projects</h1></div><div class="projects"></div>');

    RepositoriesView.prototype.childViewContainer = '.projects';

    RepositoriesView.prototype.className = 'large';

    return RepositoriesView;

  })(Marionette.CompositeView);

  HeaderView = (function(superClass) {
    extend(HeaderView, superClass);

    function HeaderView() {
      return HeaderView.__super__.constructor.apply(this, arguments);
    }

    HeaderView.prototype.template = _.template('<a class="nav-home" href="https://65535th.com">65535th</a> &middot; <a class="nav-projects" href="#projects">Projects</a>');

    HeaderView.prototype.events = {
      'click .nav-home': 'home',
      'click .nav-projects': 'projects'
    };

    HeaderView.prototype._navigate = function(event, url, trigger) {
      event.preventDefault();
      event.stopPropagation();
      app.router.navigate(url);
      return app.trigger(trigger);
    };

    HeaderView.prototype.home = function(e) {
      return this._navigate(e, '', 'show:index');
    };

    HeaderView.prototype.projects = function(e) {
      return this._navigate(e, 'projects', 'show:projects');
    };

    return HeaderView;

  })(Marionette.ItemView);

  Controller = (function(superClass) {
    extend(Controller, superClass);

    function Controller() {
      return Controller.__super__.constructor.apply(this, arguments);
    }

    Controller.collection = null;

    Controller.repos = null;

    Controller.prototype.showIndex = function() {
      var def;
      def = $.get('release/posts.json');
      return def.done((function(_this) {
        return function(object) {
          var p, posts, promises;
          posts = _.values(object);
          _this.collection = new Posts(posts);
          promises = [];
          _this.collection.each(function(p) {
            return promises.push(p.loadPost());
          });
          p = $.when.apply($, promises);
          return p.done(function() {
            var cview;
            cview = new ArticlesView({
              collection: _this.collection
            });
            _this.listenTo(cview, 'childview:show:single', function(view, args) {
              var post;
              post = args.model.get('basename');
              app.router.navigate("post/" + post);
              return app.trigger('show:post', post);
            });
            return app.layout.getRegion('main').show(cview);
          });
        };
      })(this));
    };

    Controller.prototype.showPost = function(what) {
      var p, post, view;
      post = null;
      view = null;
      if (this.collection != null) {
        post = this.collection.where({
          basename: what
        });
      }
      if (_.isArray(post && post.length)) {
        view = new ArticleView({
          model: post[0]
        });
        app.layout.getRegion('main').show(view);
        return $('body').scrollTop(0);
      } else {
        p = $.get('release/posts.json');
        return p.done((function(_this) {
          return function(posts) {
            var model, t;
            t = posts[what];
            if (t != null) {
              model = new Post(t);
              return model.loadPost().done(function() {
                view = new ArticleView({
                  model: model
                });
                return app.layout.getRegion('main').show(view);
              });
            } else {
              return app.layout.getRegion('main').show(new NotFoundView);
            }
          };
        })(this));
      }
    };

    Controller.prototype.showProjects = function() {
      var p, view;
      if (this.repos != null) {
        view = new RepositoriesView({
          collection: this.repos
        });
        return app.layout.getRegion('main').show(view);
      } else {
        this.repos = new Repositories;
        p = this.repos.fetch();
        return p.done((function(_this) {
          return function() {
            _this.repos = new Repositories(_this.repos.where({
              fork: false
            }));
            view = new RepositoriesView({
              collection: _this.repos
            });
            return app.layout.getRegion('main').show(view);
          };
        })(this));
      }
    };

    return Controller;

  })(Marionette.Object);

  controller = new Controller;

  app = new Marionette.Application;

  app.layout = new Marionette.LayoutView({
    el: 'body',
    regions: {
      main: 'main',
      header: 'header'
    }
  });

  app.router = new Marionette.AppRouter({
    controller: controller,
    appRoutes: {
      '': 'showIndex',
      'post/:basename': 'showPost',
      'projects': 'showProjects'
    }
  });

  app.on('all', function(e) {
    if (e.startsWith('show:')) {
      return $('html,body').animate({
        scrollTop: 0
      }, 200);
    }
  });

  app.on('show:post', controller.showPost, controller);

  app.on('show:index', controller.showIndex, controller);

  app.on('show:projects', controller.showProjects, controller);

  app.on('start', function() {
    Backbone.history.start();
    return app.layout.getRegion('header').show(new HeaderView);
  });

  app.start();

}).call(this);
